name: Check

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_call:
    outputs:
      build-artifact:
        description: "Build artifact name"
        value: ${{ jobs.build.outputs.artifact-name }}

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  BUILD_PATH: "./src/presentation/web"
  NODE_VERSION: "20"
  BUN_VERSION: "latest"
  CACHE_RETENTION_DAYS: "7"

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_PATH }}
          bun install --frozen-lockfile

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_PATH }}
          bun install --frozen-lockfile

      - name: Lint check
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run lint

      - name: Format check
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run format:check

      - name: Type check
        run: |
          cd ${{ env.BUILD_PATH }}
          bunx astro check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, code-quality]
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install ImageMagick for image optimization
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_PATH }}
          bun install --frozen-lockfile

      - name: Download screenshots
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run screenshots:download

      - name: Optimize images
        run: |
          cd ${{ env.BUILD_PATH }}
          node scripts/optimize-images.js

      - name: Build
        env:
          NODE_ENV: production
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run build

      - name: Test build artifacts
        run: |
          cd ${{ env.BUILD_PATH }}
          echo "üîç Checking build output..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found"
            exit 1
          fi
          
          # Check if localized pages exist
          for locale in en tr es fr de; do
            if [ ! -f "dist/$locale/index.html" ] && [ "$locale" != "en" ]; then
              echo "‚ö†Ô∏è  Missing localized page: $locale/index.html"
            fi
          done
          
          # Check if assets are properly hashed
          if [ $(find dist/_astro -name "*.js" | wc -l) -eq 0 ]; then
            echo "‚ö†Ô∏è  No JavaScript assets found"
          fi
          
          if [ $(find dist/_astro -name "*.css" | wc -l) -eq 0 ]; then
            echo "‚ö†Ô∏è  No CSS assets found"
          fi
          
          echo "‚úÖ Build artifacts validation passed"

      - name: Upload build artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: ${{ env.BUILD_PATH }}/dist
          retention-days: 7

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: ./dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=./.github/lighthouserc.json || echo "Lighthouse CI completed with issues"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: ./dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Audit bundle size
        run: |
          echo "üì¶ Bundle Size Analysis"
          echo "======================="
          
          # Check JavaScript bundle sizes
          find ./dist -name "*.js" -type f | while read file; do
            size=$(stat -c%s "$file")
            size_kb=$(($size / 1024))
            echo "JS: $(basename "$file") - ${size_kb}KB"
            if [ $size_kb -gt 100 ]; then
              echo "‚ö†Ô∏è  Large JS bundle: $file (${size_kb}KB)"
            fi
          done
          
          # Check CSS bundle sizes
          find ./dist -name "*.css" -type f | while read file; do
            size=$(stat -c%s "$file")
            size_kb=$(($size / 1024))
            echo "CSS: $(basename "$file") - ${size_kb}KB"
            if [ $size_kb -gt 50 ]; then
              echo "‚ö†Ô∏è  Large CSS bundle: $file (${size_kb}KB)"
            fi
          done
          
          # Check image optimization
          find ./dist -name "*.webp" -type f | head -5 | while read file; do
            size=$(stat -c%s "$file")
            size_kb=$(($size / 1024))
            echo "Image: $(basename "$file") - ${size_kb}KB"
            if [ $size_kb -gt 100 ]; then
              echo "‚ö†Ô∏è  Large image: $file (${size_kb}KB)"
            fi
          done

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_PATH }}
          bun install --frozen-lockfile

      - name: Security audit
        run: |
          cd ${{ env.BUILD_PATH }}
          echo "üîí Running security audit..."
          
          # Check for known vulnerabilities
          bun audit || echo "‚ö†Ô∏è  Security audit completed with findings"
          
          # Check for sensitive files
          echo "üîç Checking for sensitive files..."
          if find . -name "*.env*" -not -path "./node_modules/*" | grep -q .; then
            echo "‚ö†Ô∏è  Environment files found in repository"
            find . -name "*.env*" -not -path "./node_modules/*"
          fi
          
          # Check for hardcoded secrets
          echo "üîç Scanning for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.ts" --include="*.astro" . | grep -v node_modules | grep -v ".git" | head -5; then
            echo "‚ö†Ô∏è  Potential secrets found - please review"
          fi
          
          echo "‚úÖ Security check completed"

  comment-pr:
    name: PR Comment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, build, security-check, lighthouse, performance-audit]
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const codeQuality = jobs.jobs.find(job => job.name === 'Code Quality');
            const buildTest = jobs.jobs.find(job => job.name === 'Build');
            const securityCheck = jobs.jobs.find(job => job.name === 'Security Check');
            const lighthouse = jobs.jobs.find(job => job.name === 'Lighthouse CI');
            const performanceAudit = jobs.jobs.find(job => job.name === 'Performance Audit');
            
            const getStatusEmoji = (conclusion) => {
              switch(conclusion) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚è≥';
              }
            };
            
            const comment = `## üöÄ Check Results
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${getStatusEmoji(codeQuality?.conclusion)} ${codeQuality?.conclusion || 'pending'} |
            | Build | ${getStatusEmoji(buildTest?.conclusion)} ${buildTest?.conclusion || 'pending'} |
            | Security Check | ${getStatusEmoji(securityCheck?.conclusion)} ${securityCheck?.conclusion || 'pending'} |
            | Lighthouse CI | ${getStatusEmoji(lighthouse?.conclusion)} ${lighthouse?.conclusion || 'pending'} |
            | Performance Audit | ${getStatusEmoji(performanceAudit?.conclusion)} ${performanceAudit?.conclusion || 'pending'} |
            
            ### Performance Optimizations Applied
            - üñºÔ∏è **Image Optimization**: All screenshots optimized to 400x711 WebP format
            - üì¶ **Cache Headers**: 1-year cache for static assets with immutable flag
            - üîß **Build Optimization**: Minification and asset hashing enabled
            - üéØ **Lighthouse**: Performance, accessibility, and SEO audits included
            
            ${buildTest?.conclusion === 'success' ? '**‚úÖ Ready for deployment!**' : '**‚ùå Needs fixes before deployment**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });