name: Screenshot Updates

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all screenshots'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

env:
  BUILD_PATH: "./src/presentation/web"
  WHPH_REPO: "ahmet-cetinkaya/whph"
  BUN_VERSION: "latest"
  SCREENSHOT_DIMENSIONS: "400x711"
  MAX_IMAGE_SIZE_KB: "500"

jobs:
  check-whph-releases:
    name: Check WHPH Releases
    runs-on: ubuntu-latest
    outputs:
      has_new_release: ${{ steps.check.outputs.has_new_release }}
      latest_version: ${{ steps.check.outputs.latest_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for new WHPH releases
        id: check
        run: |
          # Get latest release from WHPH repository
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ env.WHPH_REPO }}/releases/latest" | jq -r '.tag_name')
          
          # Check if we have this version in our metadata
          mkdir -p "${{ env.BUILD_PATH }}/public/app-screenshots"
          cd "${{ env.BUILD_PATH }}/public/app-screenshots"
          if [ -f metadata.json ]; then
            CURRENT_VERSION=$(jq -r '.version // "none"' metadata.json)
          else
            CURRENT_VERSION="none"
          fi
          
          echo "Latest WHPH version: $LATEST_RELEASE"
          echo "Current screenshots version: $CURRENT_VERSION"
          
          if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ] || [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "has_new_release=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "has_new_release=false" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          fi

  update-screenshots:
    name: Update Screenshots
    needs: check-whph-releases
    runs-on: ubuntu-latest
    if: needs.check-whph-releases.outputs.has_new_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install ImageMagick for image optimization
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Install dependencies
        run: |
          cd ${{ env.BUILD_PATH }}
          bun install --frozen-lockfile

      - name: Download latest screenshots
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run screenshots:download

      - name: Optimize downloaded images
        run: |
          cd ${{ env.BUILD_PATH }}
          node scripts/optimize-images.js

      - name: Update metadata with new version
        run: |
          mkdir -p "${{ env.BUILD_PATH }}/public/app-screenshots"
          cd "${{ env.BUILD_PATH }}/public/app-screenshots"
          if [ -f metadata.json ]; then
            jq --arg version "${{ needs.check-whph-releases.outputs.latest_version }}" \
               --arg updated "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
               '.version = $version | .lastUpdated = $updated' metadata.json > metadata.tmp
            mv metadata.tmp metadata.json
          else
            echo '{"version": "${{ needs.check-whph-releases.outputs.latest_version }}", "lastUpdated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > metadata.json
          fi

      - name: Test build with new screenshots
        run: |
          cd ${{ env.BUILD_PATH }}
          bun run build

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD -- "${{ env.BUILD_PATH }}/public/app-screenshots/"; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'feat(screenshots): update to WHPH v${{ needs.check-whph-releases.outputs.latest_version }}'
          title: 'feat(screenshots): update screenshots to WHPH v${{ needs.check-whph-releases.outputs.latest_version }}'
          body: |
            ## Screenshot Updates for WHPH v${{ needs.check-whph-releases.outputs.latest_version }}
            
            This PR automatically updates the screenshot gallery with the latest images from WHPH v${{ needs.check-whph-releases.outputs.latest_version }}.
            
            ### Changes
            - üì∏ Updated screenshot gallery with latest WHPH app images
            - üîÑ Updated metadata.json with new version information
            - ‚úÖ Build tested successfully
            
            ### What's Updated
            - All localized screenshots (15+ languages)
            - Metadata tracking for version consistency
            - Gallery displays latest app features and UI
            
            ### Verification
            - ‚úÖ Screenshots downloaded successfully
            - ‚úÖ Build passes with new images
            - ‚úÖ All locales updated consistently
            
            This ensures the landing page always showcases the current WHPH application state.
          branch: feat/screenshot-updates-v${{ needs.check-whph-releases.outputs.latest_version }}
          delete-branch: true
          draft: false

  validate-screenshots:
    name: Validate Screenshots
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ImageMagick for validation
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Validate screenshot integrity
        run: |
          mkdir -p "${{ env.BUILD_PATH }}/public/app-screenshots"
          cd "${{ env.BUILD_PATH }}/public/app-screenshots"
          
          echo "üîç Validating screenshot structure..."
          
          # Check if metadata exists
          if [ ! -f metadata.json ]; then
            echo "‚ùå metadata.json is missing"
            exit 1
          fi
          
          # Validate each locale has required screenshots
          REQUIRED_LOCALES=("en-GB" "tr-TR" "es-ES" "fr-FR" "de-DE" "it-IT" "ja-JP" "ko-KR" "ru-RU" "zh-CN")
          REQUIRED_SCREENSHOTS=(1 2 3 4 5 6 7 8 9 10)
          
          for locale in "${REQUIRED_LOCALES[@]}"; do
            if [ ! -d "$locale" ]; then
              echo "‚ùå Missing locale directory: $locale"
              continue
            fi
            
            echo "‚úÖ Checking $locale..."
            for screenshot in "${REQUIRED_SCREENSHOTS[@]}"; do
              if [ ! -f "$locale/$screenshot.webp" ]; then
                echo "‚ö†Ô∏è  Missing screenshot: $locale/$screenshot.webp"
              fi
            done
          done
          
          echo "üìä Screenshot validation completed"

      - name: Check image sizes and optimization
        run: |
          mkdir -p "${{ env.BUILD_PATH }}/public/app-screenshots"
          cd "${{ env.BUILD_PATH }}/public/app-screenshots"
          
          echo "üìè Checking image sizes and optimization..."
          find . -name "*.webp" | while read img; do
            size=$(stat -c%s "$img")
            if [ $size -gt 500000 ]; then  # 500KB limit for optimized WebP
              echo "‚ö†Ô∏è  Large screenshot: $img ($(($size/1024))KB)"
            fi
            
            # Check dimensions using ImageMagick
            dimensions=$(magick identify -format "%wx%h" "$img" 2>/dev/null || echo "unknown")
            if [ "$dimensions" != "400x711" ] && [ "$dimensions" != "unknown" ]; then
              echo "‚ö†Ô∏è  Non-optimized dimensions: $img ($dimensions, expected 400x711)"
            fi
          done
          
          echo "üìä Image optimization validation completed"