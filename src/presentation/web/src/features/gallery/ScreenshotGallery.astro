---
import ImageIcon from '../../shared/components/icons/ImageIcon.astro';
import ChevronLeftIcon from '../../shared/components/icons/ChevronLeftIcon.astro';
import ChevronRightIcon from '../../shared/components/icons/ChevronRightIcon.astro';

export interface Screenshot {
  src: string;
  alt: string;
  title: string;
  description: string;
}

const screenshots: Screenshot[] = [
  {
    src: "/screenshots/today-view.png",
    alt: "WHPH Today View showing tasks and habits dashboard",
    title: "Today View",
    description: "Main dashboard with tasks and habits overview"
  },
  {
    src: "/screenshots/task-detail.png", 
    alt: "WHPH Task detail view with subtasks and progress",
    title: "Task Management",
    description: "Detailed task view with subtasks and scheduling"
  },
  {
    src: "/screenshots/habits.png",
    alt: "WHPH Habit tracking with progress charts and streaks",
    title: "Habit Tracking", 
    description: "Habit progress with streak visualization"
  },
  {
    src: "/screenshots/analytics.png",
    alt: "WHPH Time analytics and productivity insights",
    title: "Time Analytics",
    description: "Productivity patterns and time distribution"
  }
];
---

<div class="screenshot-gallery">
  <!-- Gallery Container -->
  <div class="relative overflow-hidden rounded-whph-lg bg-gray-50 dark:bg-gray-900">
    <!-- Screenshots Container -->
    <div 
      id="screenshots-container" 
      class="flex transition-transform duration-500 ease-out"
      style="transform: translateX(0%)"
    >
      {screenshots.map((screenshot, index) => (
        <div class="w-full flex-shrink-0 px-4 py-8">
          <div class="max-w-sm mx-auto">
            <!-- Screenshot with optimized loading -->
            <div class="aspect-[9/16] bg-white dark:bg-gray-800 rounded-whph shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden relative">
              <!-- Placeholder while image loads -->
              <div class="absolute inset-0 flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 p-6 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900">
                <div class="w-16 h-16 mb-4 bg-primary/10 rounded-full flex items-center justify-center">
                  <ImageIcon class="text-primary" />
                </div>
                <h3 class="font-semibold text-lg mb-2 text-center text-gray-900 dark:text-white">{screenshot.title}</h3>
                <p class="text-sm text-center leading-relaxed mb-2">{screenshot.description}</p>
                <div class="text-xs opacity-75 text-center">
                  Screenshot Preview
                </div>
              </div>
              
              <!-- Future: Actual image with lazy loading -->
              <!-- 
              <img 
                src={screenshot.src} 
                alt={screenshot.alt} 
                class="w-full h-full object-cover" 
                loading="lazy"
                decoding="async"
                fetchpriority={index === 0 ? "high" : "low"}
              />
              -->
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Navigation Arrows -->
    <button 
      id="prev-btn"
      class="absolute left-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm shadow-lg border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-300 hover:bg-white dark:hover:bg-gray-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
      aria-label="Previous screenshot"
    >
      <ChevronLeftIcon />
    </button>

    <button 
      id="next-btn"
      class="absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm shadow-lg border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-300 hover:bg-white dark:hover:bg-gray-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
      aria-label="Next screenshot"
    >
      <ChevronRightIcon />
    </button>
  </div>

  <!-- Navigation Dots -->
  <div class="flex justify-center mt-6 space-x-2">
    {screenshots.map((_, index) => (
      <button 
        class="dot w-2 h-2 rounded-full transition-all duration-300"
        class:list={[
          index === 0 ? 'bg-primary' : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'
        ]}
        data-index={index}
        aria-label={`Go to screenshot ${index + 1}`}
      ></button>
    ))}
  </div>

  <!-- Screenshot Info -->
  <div class="text-center mt-6">
    <h3 id="current-title" class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
      {screenshots[0].title}
    </h3>
    <p id="current-description" class="text-gray-600 dark:text-gray-300">
      {screenshots[0].description}
    </p>
  </div>
</div>

<script define:vars={{ screenshots }}>
  let currentIndex = 0;
  const totalScreenshots = screenshots.length;
  
  function initScreenshotGallery() {
    const container = document.getElementById('screenshots-container');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dots = document.querySelectorAll('.dot');
    const currentTitle = document.getElementById('current-title');
    const currentDescription = document.getElementById('current-description');

    function updateGallery() {
      if (!container || !currentTitle || !currentDescription) return;

      // Update container position
      const translateX = -currentIndex * 100;
      container.style.transform = `translateX(${translateX}%)`;

      // Update navigation buttons
      if (prevBtn) prevBtn.disabled = currentIndex === 0;
      if (nextBtn) nextBtn.disabled = currentIndex === totalScreenshots - 1;

      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
          dot.classList.add('bg-primary');
        } else {
          dot.classList.remove('bg-primary');
          dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
        }
      });

      // Update info
      currentTitle.textContent = screenshots[currentIndex].title;
      currentDescription.textContent = screenshots[currentIndex].description;
    }

    function goToSlide(index) {
      currentIndex = Math.max(0, Math.min(index, totalScreenshots - 1));
      updateGallery();
    }

    function nextSlide() {
      if (currentIndex < totalScreenshots - 1) {
        goToSlide(currentIndex + 1);
      }
    }

    function prevSlide() {
      if (currentIndex > 0) {
        goToSlide(currentIndex - 1);
      }
    }

    // Event listeners
    prevBtn?.addEventListener('click', prevSlide);
    nextBtn?.addEventListener('click', nextSlide);

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => goToSlide(index));
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') prevSlide();
      if (e.key === 'ArrowRight') nextSlide();
    });

    // Auto-advance (optional)
    let autoAdvanceInterval;
    
    function startAutoAdvance() {
      autoAdvanceInterval = setInterval(() => {
        if (currentIndex === totalScreenshots - 1) {
          goToSlide(0);
        } else {
          nextSlide();
        }
      }, 5000);
    }

    function stopAutoAdvance() {
      if (autoAdvanceInterval) {
        clearInterval(autoAdvanceInterval);
      }
    }

    // Start auto-advance and pause on hover
    startAutoAdvance();
    
    const gallery = document.querySelector('.screenshot-gallery');
    gallery?.addEventListener('mouseenter', stopAutoAdvance);
    gallery?.addEventListener('mouseleave', startAutoAdvance);

    // Initialize
    updateGallery();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initScreenshotGallery);
  } else {
    initScreenshotGallery();
  }
</script>