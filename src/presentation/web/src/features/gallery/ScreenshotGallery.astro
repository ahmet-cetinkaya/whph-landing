---
import { Image } from 'astro:assets';
import ImageIcon from '../../shared/components/icons/ImageIcon.astro';
import ChevronLeftIcon from '../../shared/components/icons/ChevronLeftIcon.astro';
import ChevronRightIcon from '../../shared/components/icons/ChevronRightIcon.astro';
import fs from 'fs';
import path from 'path';
import type { SupportedLanguage } from '../../shared/utils/i18n';

interface Props {
  t: (key: string, params?: Record<string, any>) => string;
  currentLang?: string;
}

const { t, currentLang = 'en' } = Astro.props;

export interface Screenshot {
  src: string;
  alt: string;
  title: string;
  description: string;
}

// Map language codes to screenshot directory names
const LANGUAGE_MAP: Record<SupportedLanguage, string> = {
  en: 'en-GB',
  cs: 'cs-CZ',
  da: 'da-DK',
  de: 'de-DE',
  el: 'el-GR',
  es: 'es-ES',
  fi: 'fi-FI',
  fr: 'fr-FR',
  it: 'it-IT',
  ja: 'ja-JP',
  ko: 'ko-KR',
  nl: 'nl-NL',
  no: 'no-NO',
  pl: 'pl-PL',
  pt: 'pt-PT',
  ro: 'ro-RO',
  ru: 'ru-RU',
  sl: 'sl-SI',
  sv: 'sv-SE',
  tr: 'tr-TR',
  uk: 'uk-UA',
  zh: 'zh-CN',
};

// Get the correct language directory with type safety
const screenshotLang = LANGUAGE_MAP[currentLang as SupportedLanguage] || 'en-GB';

// Load screenshots from local metadata or fallback to file system check
let screenshots: Screenshot[] = [];

try {
  // Try to load metadata first
  const metadataPath = path.join(process.cwd(), 'public', 'app-screenshots', 'metadata.json');
  if (fs.existsSync(metadataPath)) {
    const metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf-8'));
    const languageData = metadata.languages[screenshotLang];

    if (languageData && languageData.screenshots.length > 0) {
      screenshots = languageData.screenshots.map((filename: string, index: number) => {
        const screenshotNumber = filename.replace('.png', '');
        return {
          src: `/app-screenshots/${screenshotLang}/${filename}`,
          alt: t('screenshots.altText', { number: screenshotNumber }),
          title: t('screenshots.title') + ` ${screenshotNumber}`,
          description: t('screenshots.description', { number: screenshotNumber }),
        };
      });
    }
  }
} catch (error) {
  console.warn('Could not load screenshot metadata, checking filesystem...', error);
}

// Fallback: Check filesystem directly if metadata not available
if (screenshots.length === 0) {
  try {
    const screenshotsDir = path.join(process.cwd(), 'public', 'app-screenshots', screenshotLang);
    if (fs.existsSync(screenshotsDir)) {
      const files = fs
        .readdirSync(screenshotsDir)
        .filter(file => file.endsWith('.webp'))
        .map(file => file.replace('.webp', ''))
        .map(num => parseInt(num))
        .filter(num => !isNaN(num))
        .sort((a, b) => a - b);

      screenshots = files.map(num => ({
        src: `/app-screenshots/${screenshotLang}/${num}.webp`,
        alt: t('screenshots.altText', { number: num }),
        title: t('screenshots.title') + ` ${num}`,
        description: t('screenshots.description', { number: num }),
      }));
    }
  } catch (error) {
    console.warn('Could not read screenshots directory:', error);
  }
}

// Final fallback: Use English screenshots if language-specific ones don't exist
if (screenshots.length === 0) {
  console.warn(`No local screenshots found for ${screenshotLang}, trying fallback languages...`);

  // Fallback: current language -> English
  const fallbackLanguages = [screenshotLang, 'en-GB'];

  for (const fallbackLang of fallbackLanguages) {
    if (screenshots.length > 0) break;

    try {
      // Try to load from metadata first
      const metadataPath = path.join(process.cwd(), 'public', 'app-screenshots', 'metadata.json');
      if (fs.existsSync(metadataPath)) {
        const metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf-8'));
        const languageData = metadata.languages[fallbackLang];

        if (languageData && languageData.screenshots.length > 0) {
          screenshots = languageData.screenshots.map((filename: string, index: number) => {
            const screenshotNumber = filename.replace('.png', '');
            return {
              src: `/app-screenshots/${fallbackLang}/${filename}`,
              alt: t('screenshots.altText', { number: screenshotNumber }),
              title: t('screenshots.title') + ` ${screenshotNumber}`,
              description: t('screenshots.description', { number: screenshotNumber }),
            };
          });
          console.log(`Using ${fallbackLang} screenshots as fallback`);
          break;
        }
      }

      // Try filesystem check
      const screenshotsDir = path.join(process.cwd(), 'public', 'app-screenshots', fallbackLang);
      if (fs.existsSync(screenshotsDir)) {
        const files = fs
          .readdirSync(screenshotsDir)
          .filter(file => file.endsWith('.webp'))
          .map(file => file.replace('.webp', ''))
          .map(num => parseInt(num))
          .filter(num => !isNaN(num))
          .sort((a, b) => a - b);

        if (files.length > 0) {
          screenshots = files.map(num => ({
            src: `/app-screenshots/${fallbackLang}/${num}.webp`,
            alt: t('screenshots.altText', { number: num }),
            title: t('screenshots.title') + ` ${num}`,
            description: t('screenshots.description', { number: num }),
          }));
          console.log(`Using ${fallbackLang} screenshots as fallback`);
          break;
        }
      }
    } catch (error) {
      console.warn(`Error loading ${fallbackLang} screenshots:`, error);
    }
  }

  // Ultimate fallback: GitHub URLs for English
  if (screenshots.length === 0) {
    console.warn('No local screenshots found, using GitHub URLs as final fallback');
    const GITHUB_BASE_URL = `https://raw.githubusercontent.com/ahmet-cetinkaya/whph/main/fastlane/metadata/android/en-GB/images/phoneScreenshots`;

    for (let i = 1; i <= 10; i++) {
      screenshots.push({
        src: `${GITHUB_BASE_URL}/${i}.png`,
        alt: t('screenshots.altText', { number: i }),
        title: t('screenshots.title') + ` ${i}`,
        description: t('screenshots.description', { number: i }),
      });
    }
  }
}

// Add preload hints for critical screenshots
const preloadScreenshots = screenshots.slice(0, 2);
---

{
  preloadScreenshots.map(screenshot => (
    <link rel="preload" as="image" href={screenshot.src} fetchpriority="high" />
  ))
}

<div class="screenshot-gallery">
  <!-- Gallery Container -->
  <div class="relative overflow-hidden rounded-whph-lg bg-gray-50 dark:bg-gray-900">
    <!-- Screenshots Container -->
    <div
      id="screenshots-container"
      class="flex transition-transform duration-500 ease-out"
      style="transform: translateX(0%)"
    >
      {
        screenshots.map((screenshot, index) => (
          <div class="w-full flex-shrink-0 px-4 py-8">
            <div class="mx-auto max-w-sm">
              {/* Screenshot with Astro Image optimization */}
              <div class="relative aspect-[9/16] overflow-hidden rounded-whph border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800">
                {/* Placeholder while image loads */}
                <div class="screenshot-placeholder absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-6 text-gray-500 dark:from-gray-800 dark:to-gray-900 dark:text-gray-400">
                  <div class="mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10">
                    <ImageIcon class="text-primary" />
                  </div>
                  <div class="text-center text-sm opacity-75">Loading screenshot...</div>
                </div>

                {/* Responsive optimized image */}
                <img
                  src={screenshot.src}
                  alt={screenshot.alt}
                  class="screenshot-image h-full w-full cursor-pointer object-cover opacity-0 transition-opacity duration-500"
                  style="aspect-ratio: 283/503;"
                  loading={index === 0 || index === 1 ? 'eager' : 'lazy'}
                  decoding="async"
                  fetchpriority={index === 0 ? 'high' : index === 1 ? 'high' : 'low'}
                  onload="this.style.opacity='1'; this.parentElement.querySelector('.screenshot-placeholder').style.display='none';"
                  onerror="this.parentElement.querySelector('.screenshot-placeholder .text-sm').textContent='Failed to load screenshot';"
                  onclick="openFullscreenGallery(this.dataset.screenshotIndex)"
                  data-screenshot-index={index}
                  width="283"
                  height="503"
                  sizes="(max-width: 640px) min(90vw, 283px), (max-width: 768px) 283px, 283px"
                />
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Navigation Arrows -->
    <button
      id="prev-btn"
      class="absolute left-2 top-1/2 -translate-y-1/2 rounded-full border border-gray-200 bg-white/90 p-2 text-gray-600 shadow-lg backdrop-blur-sm transition-all hover:bg-white disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-700 dark:bg-gray-800/90 dark:text-gray-300 dark:hover:bg-gray-800"
      aria-label={t('screenshots.prevScreenshot')}
    >
      <ChevronLeftIcon />
    </button>

    <button
      id="next-btn"
      class="absolute right-2 top-1/2 -translate-y-1/2 rounded-full border border-gray-200 bg-white/90 p-2 text-gray-600 shadow-lg backdrop-blur-sm transition-all hover:bg-white disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-700 dark:bg-gray-800/90 dark:text-gray-300 dark:hover:bg-gray-800"
      aria-label={t('screenshots.nextScreenshot')}
    >
      <ChevronRightIcon />
    </button>
  </div>

  <!-- Navigation Dots -->
  <div class="mt-6 flex justify-center space-x-2">
    {
      screenshots.map((_, index) => (
        <button
          class="dot h-2 w-2 rounded-full transition-all duration-300"
          class:list={[
            index === 0
              ? 'bg-primary'
              : 'bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500',
          ]}
          data-index={index}
          aria-label={t('screenshots.goToScreenshot', { number: index + 1 })}
        />
      ))
    }
  </div>
</div>

<!-- Fullscreen Modal -->
<div id="fullscreen-modal" class="fixed inset-0 z-50 hidden bg-black/95 backdrop-blur-sm">
  <!-- Close Button -->
  <button
    id="fullscreen-close"
    class="absolute right-4 top-4 z-10 rounded-full bg-black/50 p-2 text-white transition-all hover:bg-black/70"
    aria-label="Close fullscreen"
  >
    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"
      ></path>
    </svg>
  </button>

  <!-- Fullscreen Gallery Container -->
  <div class="flex h-full items-center justify-center">
    <div
      class="relative flex h-full w-full max-w-sm items-center justify-center px-4 sm:max-w-md md:max-w-lg"
    >
      <!-- Fullscreen Screenshots Container -->
      <div
        id="fullscreen-screenshots-container"
        class="flex h-full w-full transition-transform duration-500 ease-out"
        style="transform: translateX(0%)"
      >
        <!-- Screenshots will be dynamically added here -->
      </div>

      <!-- Fullscreen Navigation Arrows -->
      <button
        id="fullscreen-prev-btn"
        class="absolute left-2 top-1/2 z-10 -translate-y-1/2 rounded-full bg-black/50 p-3 text-white transition-all hover:bg-black/70 disabled:cursor-not-allowed disabled:opacity-30"
        aria-label="Previous screenshot"
      >
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"
          ></path>
        </svg>
      </button>

      <button
        id="fullscreen-next-btn"
        class="absolute right-2 top-1/2 z-10 -translate-y-1/2 rounded-full bg-black/50 p-3 text-white transition-all hover:bg-black/70 disabled:cursor-not-allowed disabled:opacity-30"
        aria-label="Next screenshot"
      >
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Fullscreen Navigation Dots -->
  <div class="absolute bottom-8 left-1/2 flex -translate-x-1/2 space-x-2">
    <!-- Dots will be dynamically added here -->
  </div>
</div>

<script define:vars={{ screenshots }}>
  let currentIndex = 0;
  let validScreenshots = [];
  let totalScreenshots = 0;

  function initScreenshotGallery() {
    const container = document.getElementById('screenshots-container');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const dotsContainer = document.querySelector('.screenshot-gallery .flex.justify-center');
    let dots = [];

    // Image preloading cache
    const imageCache = new Map();
    const preloadedImages = new Set();

    // Dynamically check which screenshots exist
    async function checkScreenshotExistence() {
      validScreenshots = [];

      for (let i = 0; i < screenshots.length; i++) {
        const screenshot = screenshots[i];
        try {
          const img = new Image();
          const imageExists = await new Promise(resolve => {
            img.onload = () => resolve(true);
            img.onerror = () => resolve(false);
            img.src = screenshot.src;

            // Timeout after 3 seconds
            setTimeout(() => resolve(false), 3000);
          });

          if (imageExists) {
            validScreenshots.push({ ...screenshot, originalIndex: i });
          }
        } catch {
          // Skip this screenshot if error occurs
          continue;
        }
      }

      totalScreenshots = validScreenshots.length;

      // Update the gallery with only valid screenshots
      updateGalleryStructure();
      updateGallery();
    }

    // Update gallery structure based on valid screenshots
    function updateGalleryStructure() {
      if (!container || !dotsContainer) return;

      // Clear existing content
      container.innerHTML = '';
      dotsContainer.innerHTML = '';
      dots = []; // Reset dots array

      // Add only valid screenshots to container
      validScreenshots.forEach((screenshot, index) => {
        // Add screenshot slide
        const slideDiv = document.createElement('div');
        slideDiv.className = 'w-full flex-shrink-0 px-4 py-8';
        slideDiv.innerHTML = `
          <div class="max-w-sm mx-auto">
            <div class="aspect-[9/16] bg-white dark:bg-gray-800 rounded-whph shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden relative">
              <div class="absolute inset-0 flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 p-6 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 screenshot-placeholder">
                <div class="w-16 h-16 mb-4 bg-primary/10 rounded-full flex items-center justify-center">
                  <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div class="text-sm opacity-75 text-center">Loading screenshot...</div>
              </div>
              <img
                src="${screenshot.src}"
                alt="${screenshot.alt}"
                class="w-full h-full object-cover opacity-0 transition-opacity duration-500 screenshot-image"
                style="aspect-ratio: 283/503;"
                loading="${index === 0 ? 'eager' : 'lazy'}"
                decoding="async"
                data-screenshot-index="${index}"
                width="283"
                height="503"
                sizes="(max-width: 640px) min(90vw, 283px), (max-width: 768px) 283px, 283px"
                onload="this.style.opacity='1'; this.parentElement.querySelector('.screenshot-placeholder').style.display='none';"
                onerror="this.parentElement.querySelector('.screenshot-placeholder .text-sm').textContent='Failed to load screenshot';"
                onclick="openFullscreenGallery(${index})"
                style="cursor: pointer;"
              />
            </div>
          </div>
        `;
        container.appendChild(slideDiv);

        // Add click event listener to the image
        const img = slideDiv.querySelector('img');
        if (img) {
          img.addEventListener('click', () => openFullscreenGallery(index));
        }

        // Add navigation dot
        const dotButton = document.createElement('button');
        dotButton.className = `dot w-2 h-2 rounded-full transition-all duration-300 ${index === 0 ? 'bg-primary' : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'}`;
        dotButton.setAttribute('data-index', index);
        dotButton.setAttribute('aria-label', `Go to screenshot ${index + 1}`);
        dotButton.addEventListener('click', () => goToSlide(index));
        dotsContainer.appendChild(dotButton);
        dots.push(dotButton); // Add to dots array
      });
    }

    // Preload next and previous images for smoother navigation
    function preloadAdjacentImages(currentIdx) {
      const imagesToPreload = [];

      // Preload next image
      if (currentIdx + 1 < totalScreenshots) {
        imagesToPreload.push(currentIdx + 1);
      }

      // Preload previous image
      if (currentIdx - 1 >= 0) {
        imagesToPreload.push(currentIdx - 1);
      }

      // Preload next 2 images for better UX
      if (currentIdx + 2 < totalScreenshots) {
        imagesToPreload.push(currentIdx + 2);
      }

      imagesToPreload.forEach(idx => {
        if (!preloadedImages.has(idx) && screenshots[idx]) {
          const img = new Image();
          img.src = screenshots[idx].src;
          img.loading = 'eager';
          img.decoding = 'async';

          img.onload = () => {
            imageCache.set(idx, img);
            preloadedImages.add(idx);
          };

          img.onerror = () => {
            console.warn(`Failed to preload screenshot ${idx + 1}`);
          };
        }
      });
    }

    function updateGallery() {
      if (!container) return;

      // Update container position
      const translateX = -currentIndex * 100;
      container.style.transform = `translateX(${translateX}%)`;

      // Update navigation buttons
      if (prevBtn) prevBtn.disabled = currentIndex === 0;
      if (nextBtn) nextBtn.disabled = currentIndex === totalScreenshots - 1;

      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
          dot.classList.add('bg-primary');
        } else {
          dot.classList.remove('bg-primary');
          dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
        }
      });

      // Preload adjacent images for smoother navigation
      preloadAdjacentImages(currentIndex);
    }

    function goToSlide(index) {
      currentIndex = Math.max(0, Math.min(index, totalScreenshots - 1));
      updateGallery();
    }

    function nextSlide() {
      if (currentIndex < totalScreenshots - 1) {
        goToSlide(currentIndex + 1);
      }
    }

    function prevSlide() {
      if (currentIndex > 0) {
        goToSlide(currentIndex - 1);
      }
    }

    // Setup event listeners
    function setupEventListeners() {
      // Navigation buttons
      prevBtn?.addEventListener('click', prevSlide);
      nextBtn?.addEventListener('click', nextSlide);

      // Keyboard navigation
      document.addEventListener('keydown', e => {
        if (e.key === 'ArrowLeft') prevSlide();
        if (e.key === 'ArrowRight') nextSlide();
      });
    }

    // Auto-advance (optional)
    let autoAdvanceInterval;

    function startAutoAdvance() {
      if (totalScreenshots <= 1) return; // Don't auto-advance if only one screenshot

      autoAdvanceInterval = setInterval(() => {
        if (currentIndex === totalScreenshots - 1) {
          goToSlide(0);
        } else {
          nextSlide();
        }
      }, 5000);
    }

    function stopAutoAdvance() {
      if (autoAdvanceInterval) {
        clearInterval(autoAdvanceInterval);
      }
    }

    // Initialize the gallery
    async function initialize() {
      // Setup basic event listeners first
      setupEventListeners();

      // Start auto-advance and pause on hover
      const gallery = document.querySelector('.screenshot-gallery');
      gallery?.addEventListener('mouseenter', stopAutoAdvance);
      gallery?.addEventListener('mouseleave', startAutoAdvance);

      // Check screenshot existence and update gallery
      await checkScreenshotExistence();

      // Update global valid screenshots for fullscreen
      window.galleryValidScreenshots = validScreenshots;

      if (totalScreenshots > 0) {
        updateGallery();
        preloadAdjacentImages(0);
        startAutoAdvance();
      } else {
        // Hide gallery if no screenshots found
        const galleryElement = document.querySelector('.screenshot-gallery');
        if (galleryElement) {
          galleryElement.style.display = 'none';
        }
      }
    }

    // Start initialization
    initialize();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initScreenshotGallery);
  } else {
    initScreenshotGallery();
  }

  // Global variables for fullscreen
  window.galleryScreenshots = screenshots;
  window.galleryValidScreenshots = [];

  // Simple fullscreen functionality
  window.openFullscreenGallery = function (startIndex) {
    const modal = document.getElementById('fullscreen-modal');
    const body = document.body;

    if (!modal) return;

    // Use the current valid screenshots or fall back to all screenshots
    const screenshotsToUse =
      window.galleryValidScreenshots.length > 0
        ? window.galleryValidScreenshots
        : window.galleryScreenshots;
    const currentIndex = parseInt(startIndex) || 0;

    // Show modal and prevent scroll
    modal.classList.remove('hidden');
    body.style.overflow = 'hidden';

    // Initialize fullscreen gallery with current screenshots
    initializeFullscreenGallery(screenshotsToUse, currentIndex);
  };

  function initializeFullscreenGallery(screenshotsData, startIndex) {
    console.log(
      'Initializing fullscreen with',
      screenshotsData.length,
      'screenshots, starting at index',
      startIndex
    );

    const container = document.getElementById('fullscreen-screenshots-container');
    const dotsContainer = document.querySelector('#fullscreen-modal .absolute.bottom-8');

    if (!container || !dotsContainer) {
      console.error('Fullscreen containers not found');
      return;
    }

    // Clear existing content
    container.innerHTML = '';
    dotsContainer.innerHTML = '';

    let currentIndex = startIndex;

    // Create slides for each screenshot
    screenshotsData.forEach((screenshot, index) => {
      console.log('Creating slide for screenshot:', screenshot.src);

      // Create slide
      const slide = document.createElement('div');
      slide.className = 'w-full flex-shrink-0 flex items-center justify-center h-full px-4';
      slide.innerHTML = `
        <div class="max-h-full max-w-full flex items-center justify-center">
          <img
            src="${screenshot.src}"
            alt="${screenshot.alt}"
            class="max-h-[90vh] max-w-full object-contain rounded-lg shadow-2xl"
            loading="${index === startIndex ? 'eager' : 'lazy'}"
            onload="console.log('Fullscreen image loaded:', this.src)"
            onerror="console.error('Fullscreen image failed to load:', this.src)"
          />
        </div>
      `;
      container.appendChild(slide);

      // Create dot
      const dot = document.createElement('button');
      dot.className = `w-3 h-3 rounded-full transition-all duration-300 ${index === startIndex ? 'bg-white' : 'bg-white/50 hover:bg-white/70'}`;
      dot.addEventListener('click', () => goToSlide(index));
      dotsContainer.appendChild(dot);
    });

    // Navigation functions
    function goToSlide(index) {
      currentIndex = Math.max(0, Math.min(index, screenshotsData.length - 1));
      updateGallery();
    }

    function updateGallery() {
      // Update container position
      container.style.transform = `translateX(-${currentIndex * 100}%)`;

      // Update navigation buttons
      const prevBtn = document.getElementById('fullscreen-prev-btn');
      const nextBtn = document.getElementById('fullscreen-next-btn');
      if (prevBtn) prevBtn.disabled = currentIndex === 0;
      if (nextBtn) nextBtn.disabled = currentIndex === screenshotsData.length - 1;

      // Update dots
      const dots = dotsContainer.querySelectorAll('button');
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.remove('bg-white/50');
          dot.classList.add('bg-white');
        } else {
          dot.classList.remove('bg-white');
          dot.classList.add('bg-white/50');
        }
      });
    }

    // Setup navigation buttons - fix event listeners
    const prevBtn = document.getElementById('fullscreen-prev-btn');
    const nextBtn = document.getElementById('fullscreen-next-btn');
    const closeBtn = document.getElementById('fullscreen-close');

    // Clear existing event listeners by cloning nodes
    if (prevBtn) {
      const newPrevBtn = prevBtn.cloneNode(true);
      prevBtn.parentNode.replaceChild(newPrevBtn, prevBtn);
      newPrevBtn.addEventListener('click', e => {
        e.stopPropagation();
        if (currentIndex > 0) goToSlide(currentIndex - 1);
      });
    }

    if (nextBtn) {
      const newNextBtn = nextBtn.cloneNode(true);
      nextBtn.parentNode.replaceChild(newNextBtn, nextBtn);
      newNextBtn.addEventListener('click', e => {
        e.stopPropagation();
        if (currentIndex < screenshotsData.length - 1) goToSlide(currentIndex + 1);
      });
    }

    if (closeBtn) {
      const newCloseBtn = closeBtn.cloneNode(true);
      closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);
      newCloseBtn.addEventListener('click', e => {
        e.stopPropagation();
        closeFullscreen();
      });
    }

    // Setup keyboard navigation
    function handleKeyboard(e) {
      if (e.key === 'Escape') closeFullscreen();
      if (e.key === 'ArrowLeft' && currentIndex > 0) goToSlide(currentIndex - 1);
      if (e.key === 'ArrowRight' && currentIndex < screenshotsData.length - 1)
        goToSlide(currentIndex + 1);
    }

    // Remove old keyboard listener and add new one
    if (window.fullscreenKeyHandler) {
      document.removeEventListener('keydown', window.fullscreenKeyHandler);
    }
    window.fullscreenKeyHandler = handleKeyboard;
    document.addEventListener('keydown', handleKeyboard);

    // Setup backdrop click
    const modal = document.getElementById('fullscreen-modal');
    if (modal) {
      modal.onclick = e => {
        if (e.target === modal) closeFullscreen();
      };
    }

    // Initial update
    updateGallery();
    console.log('Fullscreen gallery initialized');
  }

  function closeFullscreen() {
    const modal = document.getElementById('fullscreen-modal');
    const body = document.body;

    modal?.classList.add('hidden');
    body.style.overflow = '';

    // Remove keyboard listener
    if (window.fullscreenKeyHandler) {
      document.removeEventListener('keydown', window.fullscreenKeyHandler);
    }
  }
</script>
