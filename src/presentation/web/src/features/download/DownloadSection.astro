---
import Container from '../../shared/components/ui/Container.astro';
import Button from '../../shared/components/ui/Button.astro';
import AnimatedSection from '../../core/acore-astro/src/components/AnimatedSection.astro';
import AndroidDownloadModal from './AndroidDownloadModal.astro';
import AndroidIcon from '../../shared/components/icons/AndroidIcon.astro';
import WindowsIcon from '../../shared/components/icons/WindowsIcon.astro';
import LinuxIcon from '../../shared/components/icons/LinuxIcon.astro';

interface Props {
  t: (key: string, params?: Record<string, any>) => string;
}

const { t } = Astro.props;

// GitHub repository releases URL
const GITHUB_RELEASES_URL = 'https://github.com/ahmet-cetinkaya/whph/releases/latest';
---

<div>
  <Container>
    <AnimatedSection animation="fade-up" delay={0}>
      <div class="text-center">
        <h2 class="mb-4 text-section-title">{t('download.title')}</h2>
        <p class="mx-auto mb-8 max-w-2xl text-xl text-text-secondary dark:text-dark-secondary">
          {t('download.subtitle')}
        </p>
        <div class="mb-8 flex flex-col justify-center gap-4 sm:flex-row" id="download-buttons">
          <Button href="#" variant="secondary" size="lg" id="android-btn">
            <AndroidIcon class="mr-2 h-5 w-5" />
            {t('download.downloadFor', { platform: t('hero.platforms.android') })}
          </Button>
          <Button
            href={GITHUB_RELEASES_URL}
            variant="secondary"
            size="lg"
            id="windows-btn"
            target="_blank"
            rel="noopener noreferrer"
          >
            <WindowsIcon class="mr-2 h-5 w-5" />
            {t('download.downloadFor', { platform: t('hero.platforms.windows') })}
          </Button>
          <Button
            href={GITHUB_RELEASES_URL}
            variant="secondary"
            size="lg"
            id="linux-btn"
            target="_blank"
            rel="noopener noreferrer"
          >
            <LinuxIcon class="mr-2 h-5 w-5" />
            {t('download.downloadFor', { platform: t('hero.platforms.linux') })}
          </Button>
        </div>
      </div>
    </AnimatedSection>
  </Container>
</div>

<!-- Android Download Modal -->
<AndroidDownloadModal t={t} />

<script>
  // OS Detection and Auto-selection for WHPH Download Section
  function detectOS() {
    const userAgent = navigator.userAgent.toLowerCase();
    // Use modern userAgentData when available, fallback to userAgent parsing
    const platform =
      (navigator as any).userAgentData?.platform?.toLowerCase() || userAgent.includes('win')
        ? 'windows'
        : userAgent.includes('mac')
          ? 'macos'
          : userAgent.includes('linux')
            ? 'linux'
            : 'unknown';

    // More comprehensive OS detection

    // Check for Android first (most specific)
    if (userAgent.includes('android')) {
      return 'android';
    }

    // Check for Windows (various versions)
    if (
      userAgent.includes('win') ||
      platform.includes('win') ||
      userAgent.includes('windows') ||
      platform.includes('windows')
    ) {
      return 'windows';
    }

    // Check for Linux (but not Android)
    if (
      (userAgent.includes('linux') || platform.includes('linux')) &&
      !userAgent.includes('android')
    ) {
      return 'linux';
    }

    // Check for macOS (treat as Linux since macOS isn't supported yet)
    if (
      userAgent.includes('mac') ||
      platform.includes('mac') ||
      userAgent.includes('darwin') ||
      platform.includes('darwin')
    ) {
      return 'linux'; // Default to Linux for macOS users
    }

    // Check for iOS (treat as Android since iOS isn't supported yet)
    if (
      userAgent.includes('iphone') ||
      userAgent.includes('ipad') ||
      userAgent.includes('ipod') ||
      userAgent.includes('ios')
    ) {
      return 'android'; // Default to Android for iOS users
    }

    // Check for other mobile platforms
    if (userAgent.includes('mobile') || userAgent.includes('phone')) {
      return 'android';
    }

    // Default fallback based on common desktop patterns
    if (userAgent.includes('x11') || userAgent.includes('unix')) {
      return 'linux';
    }

    // Final fallback - default to Android as it's most widely used
    return 'android';
  }

  function setActivePlatform(platform: string) {
    // Wait for DOM to be ready
    const downloadButtons = document.getElementById('download-buttons');
    if (!downloadButtons) {
      console.warn('Download buttons container not found');
      return;
    }

    // Reset all buttons to secondary variant
    const allButtons = downloadButtons.querySelectorAll('a, button');
    allButtons.forEach(button => {
      // Remove primary variant classes
      button.className = button.className
        .replace(/\bbg-primary\b/g, '')
        .replace(/\btext-black\b/g, '')
        .replace(/\bhover:bg-primary\/90\b/g, '')
        .replace(/\bshadow-sm\b/g, '')
        .replace(/\bhover:shadow-lg\b/g, '')
        .replace(/\bhover:shadow-primary\/25\b/g, '');

      // Ensure secondary variant classes are present
      if (!button.className.includes('border-2 border-primary')) {
        button.className +=
          ' border-2 border-primary text-primary hover:bg-primary/10 bg-transparent hover:border-primary/80';
      }

      // Clean up extra spaces
      button.className = button.className.replace(/\s+/g, ' ').trim();
    });

    // Set the detected platform button as primary
    const targetButton = document.getElementById(`${platform}-btn`);
    if (targetButton) {
      // Remove secondary variant classes
      targetButton.className = targetButton.className
        .replace(/\bborder-2 border-primary\b/g, '')
        .replace(/\btext-primary\b/g, '')
        .replace(/\bhover:bg-primary\/10\b/g, '')
        .replace(/\bbg-transparent\b/g, '')
        .replace(/\bhover:border-primary\/80\b/g, '');

      // Add primary variant classes
      targetButton.className +=
        ' bg-primary text-black hover:bg-primary/90 shadow-sm hover:shadow-lg hover:shadow-primary/25';

      // Clean up extra spaces
      targetButton.className = targetButton.className.replace(/\s+/g, ' ').trim();
    } else {
      console.warn(`Target button not found: ${platform}-btn`);
    }
  }

  // Initialize OS detection
  function initOSDetection() {
    try {
      const detectedOS = detectOS();
      setActivePlatform(detectedOS);

      // Log for debugging (can be removed in production)
      console.log('WHPH OS Detection:', {
        detected: detectedOS,
        userAgent: navigator.userAgent,
        platform: (navigator as any).userAgentData?.platform || 'detected from user agent',
      });
    } catch (error) {
      console.error('Error in OS detection:', error);
      // Fallback to Android if detection fails
      setActivePlatform('android');
    }
  }

  // Run OS detection when the page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initOSDetection);
  } else {
    // DOM is already loaded
    initOSDetection();
  }
</script>
