---
// Accessibility enhancements component
// This component adds global accessibility improvements
---

<!-- Skip Navigation Link -->
<a 
  href="#main-content" 
  class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 z-50 bg-primary text-black px-4 py-2 rounded-whph font-semibold transition-all duration-200"
>
  Skip to main content
</a>

<!-- Screen Reader Announcements -->
<div id="sr-announcements" class="sr-only" aria-live="polite" aria-atomic="true"></div>

<style>
  /* Screen reader only class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  .focus\:not-sr-only:focus {
    position: static;
    width: auto;
    height: auto;
    padding: 0.5rem 1rem;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .btn-primary {
      border: 2px solid;
    }
    
    .card {
      border: 1px solid;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
  
  /* Focus indicators */
  :focus {
    outline: 2px solid #F4D03E;
    outline-offset: 2px;
  }
  
  :focus:not(:focus-visible) {
    outline: none;
  }
  
  :focus-visible {
    outline: 2px solid #F4D03E;
    outline-offset: 2px;
  }
</style>

<script>
  // Screen reader announcements
  function announceToScreenReader(message: string) {
    const announcements = document.getElementById('sr-announcements');
    if (announcements) {
      announcements.textContent = message;
      setTimeout(() => {
        announcements.textContent = '';
      }, 1000);
    }
  }
  
  // Export for global use
  (window as any).announceToScreenReader = announceToScreenReader;
  
  // Keyboard navigation enhancements
  document.addEventListener('keydown', (e) => {
    // Escape key handler for modals/menus
    if (e.key === 'Escape') {
      const mobileMenu = document.getElementById('mobile-menu');
      if (mobileMenu && !mobileMenu.classList.contains('invisible')) {
        const closeButton = document.getElementById('mobile-menu-close');
        closeButton?.click();
      }
    }
  });
  
  // Focus management for mobile menu
  function trapFocus(element: Element) {
    const focusableElements = element.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
    element.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement.focus();
            e.preventDefault();
          }
        } else {
          if (document.activeElement === lastElement) {
            firstElement.focus();
            e.preventDefault();
          }
        }
      }
    });
  }
  
  // Initialize focus trapping for mobile menu
  const mobileMenu = document.getElementById('mobile-menu');
  if (mobileMenu) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const target = mutation.target as Element;
          if (!target.classList.contains('invisible')) {
            trapFocus(target);
            // Focus first focusable element
            const firstFocusable = target.querySelector('button, [href]') as HTMLElement;
            firstFocusable?.focus();
          }
        }
      });
    });
    
    observer.observe(mobileMenu, { attributes: true });
  }
</script>