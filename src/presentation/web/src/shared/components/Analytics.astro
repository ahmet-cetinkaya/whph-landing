---
// Analytics component for privacy-focused tracking
// Uses Umami for self-hosted analytics with GDPR compliance

interface Props {
  websiteId?: string;
  src?: string;
  domains?: string;
  autoTrack?: boolean;
  enableEvents?: boolean;
}

const { 
  websiteId = import.meta.env.PUBLIC_UMAMI_WEBSITE_ID,
  src = import.meta.env.PUBLIC_UMAMI_SRC || "https://analytics.whph.ahmetcetinkaya.me/script.js",
  domains = import.meta.env.PUBLIC_UMAMI_DOMAINS || "whph.ahmetcetinkaya.me",
  autoTrack = true,
  enableEvents = true
} = Astro.props;

// Only load analytics in production or when explicitly enabled
const isEnabled = import.meta.env.PROD || import.meta.env.PUBLIC_ENABLE_ANALYTICS === 'true';
const isDev = import.meta.env.DEV;
---

{isEnabled && websiteId && (
  <script 
    async 
    src={src}
    data-website-id={websiteId}
    data-domains={domains}
    data-auto-track={autoTrack}
    data-do-not-track="true"
    data-cache="true"
  ></script>
)}

{isDev && (
  <script>
    // Development analytics simulation
    console.log('ðŸ“Š Analytics (Development Mode):', {
      websiteId: websiteId || 'Not configured',
      src: src,
      domains: domains,
      enabled: isEnabled,
      note: 'Analytics disabled in development. Set PUBLIC_ENABLE_ANALYTICS=true to test.'
    });
  </script>
)}

<script define:vars={{ enableEvents, isEnabled, isDev }}>
  // Enhanced analytics with privacy-focused event tracking
  if (isEnabled && typeof window !== 'undefined') {
    
    // Wait for Umami to load
    function waitForUmami(callback, maxAttempts = 50) {
      let attempts = 0;
      
      function check() {
        if (window.umami || attempts >= maxAttempts) {
          callback(window.umami);
        } else {
          attempts++;
          setTimeout(check, 100);
        }
      }
      
      check();
    }
    
    // Initialize analytics when page loads
    document.addEventListener('DOMContentLoaded', () => {
      waitForUmami((umami) => {
        if (!umami) {
          console.warn('ðŸ“Š Umami analytics failed to load');
          return;
        }
        
        if (isDev) {
          console.log('ðŸ“Š Umami analytics loaded successfully');
        }
        
        // Enhanced event tracking if enabled
        if (enableEvents) {
          initializeEventTracking(umami);
        }
      });
    });
    
    function initializeEventTracking(umami) {
      // Download button clicks
      document.querySelectorAll('a[href*="download"], a[href*="github.com/ahmet-cetinkaya/whph/releases"]').forEach(link => {
        link.addEventListener('click', (e) => {
          const platform = getPlatformFromText(link.textContent) || 'unknown';
          umami.track('download-click', { platform: platform });
        });
      });
      
      // Navigation clicks
      document.querySelectorAll('a[href^="#"]').forEach(link => {
        link.addEventListener('click', (e) => {
          const section = link.getAttribute('href').substring(1);
          umami.track('navigation', { section: section });
        });
      });
      
      // FAQ interactions
      document.querySelectorAll('[data-faq-toggle]').forEach(button => {
        button.addEventListener('click', (e) => {
          const faq = button.getAttribute('data-faq-toggle');
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          umami.track('faq-interaction', { 
            question: faq, 
            action: isExpanded ? 'close' : 'open' 
          });
        });
      });
      
      // Screenshot gallery interactions
      document.querySelectorAll('.dot, #prev-btn, #next-btn').forEach(control => {
        control.addEventListener('click', (e) => {
          const action = control.id || 'dot-navigation';
          umami.track('gallery-interaction', { action: action });
        });
      });
      
            
      // External link tracking
      document.querySelectorAll('a[href^="http"]:not([href*="whph.ahmetcetinkaya.me"])').forEach(link => {
        link.addEventListener('click', (e) => {
          const destination = getDomain(link.href);
          umami.track('external-link', { destination: destination });
        });
      });
      
      // Scroll depth tracking
      let maxScrollDepth = 0;
      let scrollTimer;
      
      window.addEventListener('scroll', () => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          const scrollDepth = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
          
          if (scrollDepth > maxScrollDepth) {
            maxScrollDepth = scrollDepth;
            
            // Track at 25%, 50%, 75%, and 100%
            if ([25, 50, 75, 100].includes(scrollDepth)) {
              umami.track('scroll-depth', { percentage: scrollDepth });
            }
          }
        }, 100);
      });
      
      // Performance tracking
      window.addEventListener('load', () => {
        // Track page load performance
        if (performance.getEntriesByType) {
          const navigationEntry = performance.getEntriesByType('navigation')[0];
          if (navigationEntry) {
            const loadTime = Math.round(navigationEntry.loadEventEnd - navigationEntry.navigationStart);
            
            let performanceCategory = 'excellent';
            if (loadTime > 3000) performanceCategory = 'poor';
            else if (loadTime > 1500) performanceCategory = 'needs-improvement';
            else if (loadTime > 1000) performanceCategory = 'good';
            
            umami.track('page-performance', { 
              loadTime: Math.round(loadTime / 100) * 100, // Round to nearest 100ms
              category: performanceCategory
            });
          }
        }
      });
    }
    
    // Helper functions
    function getPlatformFromText(text) {
      const lowerText = text.toLowerCase();
      if (lowerText.includes('android')) return 'android';
      if (lowerText.includes('windows')) return 'windows';
      if (lowerText.includes('linux')) return 'linux';
      if (lowerText.includes('github')) return 'github';
      return null;
    }
    
    function getDomain(url) {
      try {
        return new URL(url).hostname;
      } catch {
        return 'unknown';
      }
    }
  }
</script>

<!-- Privacy Notice for Analytics -->
{isEnabled && (
  <noscript>
    <!-- Analytics disabled for users without JavaScript -->
  </noscript>
)}

<style>
  /* Ensure analytics script doesn't affect layout */
  script[data-website-id] {
    display: none;
  }
</style>