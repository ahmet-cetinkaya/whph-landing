---
// Performance monitoring component for development
// This will be removed or disabled in production
const isDev = import.meta.env.DEV;
---

<script is:inline define:vars={{ isDev }}>
  // Core Web Vitals monitoring
  function initPerformanceMonitoring() {
    if (typeof window === 'undefined') return;

    // Only run in development or when explicitly enabled
    const enablePerfMonitoring = localStorage.getItem('whph-perf-monitoring') === 'true';

    if (!isDev && !enablePerfMonitoring) return;

    console.log('üéØ WHPH Performance Monitoring Active');

    // Measure page load performance
    window.addEventListener('load', () => {
      if (performance.getEntriesByType) {
        const navigationEntry = performance.getEntriesByType('navigation')[0];
        if (navigationEntry) {
          // Helper function to safely calculate timing differences
          const safeTiming = (end, start) => {
            if (!end || !start || isNaN(end) || isNaN(start)) return 'N/A';
            const diff = end - start;
            return isNaN(diff) ? 'N/A' : `${Math.round(diff)}ms`;
          };

          console.log('üìä Page Load Metrics:', {
            domContentLoaded: safeTiming(
              navigationEntry.domContentLoadedEventEnd,
              navigationEntry.domContentLoadedEventStart
            ),
            loadComplete: safeTiming(navigationEntry.loadEventEnd, navigationEntry.loadEventStart),
            firstByte: safeTiming(navigationEntry.responseStart, navigationEntry.requestStart),
            domInteractive: safeTiming(
              navigationEntry.domInteractive,
              navigationEntry.navigationStart
            ),
          });
        }

        // Resource loading analysis
        const resources = performance.getEntriesByType('resource');
        const cssResources = resources.filter(r => r.name.includes('.css'));
        const jsResources = resources.filter(r => r.name.includes('.js'));

        console.log('üì¶ Resource Load Times:', {
          css: cssResources.map(r => ({
            name: r.name.split('/').pop(),
            duration: isNaN(r.duration) ? 'N/A' : `${Math.round(r.duration)}ms`,
            size: r.transferSize ? `${Math.round(r.transferSize / 1024)}kb` : 'cached',
          })),
          js: jsResources.map(r => ({
            name: r.name.split('/').pop(),
            duration: isNaN(r.duration) ? 'N/A' : `${Math.round(r.duration)}ms`,
            size: r.transferSize ? `${Math.round(r.transferSize / 1024)}kb` : 'cached',
          })),
        });
      }
    });

    // Monitor Core Web Vitals if available
    if ('PerformanceObserver' in window) {
      // Helper function to check if entry type is supported
      function isEntryTypeSupported(entryType) {
        try {
          // Check if PerformanceObserver.supportedEntryTypes exists (newer browsers)
          if (PerformanceObserver.supportedEntryTypes) {
            return PerformanceObserver.supportedEntryTypes.includes(entryType);
          }

          // Fallback: try to create a temporary observer
          const tempObserver = new PerformanceObserver(() => {});
          tempObserver.observe({ entryTypes: [entryType] });
          tempObserver.disconnect();
          return true;
        } catch (e) {
          return false;
        }
      }

      // Largest Contentful Paint
      if (isEntryTypeSupported('largest-contentful-paint')) {
        try {
          const lcpObserver = new PerformanceObserver(entryList => {
            const entries = entryList.getEntries();
            const lastEntry = entries[entries.length - 1];
            if (lastEntry && !isNaN(lastEntry.startTime)) {
              console.log(
                'üé® LCP (Largest Contentful Paint):',
                `${Math.round(lastEntry.startTime)}ms`
              );
            }
          });
          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
        } catch (e) {
          console.log('‚ö†Ô∏è LCP monitoring failed to initialize');
        }
      }

      // First Input Delay
      if (isEntryTypeSupported('first-input')) {
        try {
          const fidObserver = new PerformanceObserver(entryList => {
            const firstInput = entryList.getEntries()[0];
            if (firstInput && !isNaN(firstInput.processingStart) && !isNaN(firstInput.startTime)) {
              const fid = firstInput.processingStart - firstInput.startTime;
              if (!isNaN(fid)) {
                console.log('‚ö° FID (First Input Delay):', `${Math.round(fid)}ms`);
              }
            }
          });
          fidObserver.observe({ entryTypes: ['first-input'] });
        } catch (e) {
          console.log('‚ö†Ô∏è FID monitoring failed to initialize');
        }
      }

      // Cumulative Layout Shift
      if (isEntryTypeSupported('layout-shift')) {
        try {
          let clsValue = 0;
          const clsObserver = new PerformanceObserver(entryList => {
            for (const entry of entryList.getEntries()) {
              if (!entry.hadRecentInput) {
                clsValue += entry.value;
              }
            }
            console.log('üìê CLS (Cumulative Layout Shift):', clsValue.toFixed(4));
          });
          clsObserver.observe({ entryTypes: ['layout-shift'] });
        } catch (e) {
          console.log('‚ö†Ô∏è CLS monitoring failed to initialize');
        }
      }
    }

    // Memory usage monitoring (if available)
    if ('memory' in performance) {
      const memoryInfo = performance.memory;
      console.log('üíæ Memory Usage:', {
        used: `${Math.round(memoryInfo.usedJSHeapSize / 1024 / 1024)}mb`,
        total: `${Math.round(memoryInfo.totalJSHeapSize / 1024 / 1024)}mb`,
        limit: `${Math.round(memoryInfo.jsHeapSizeLimit / 1024 / 1024)}mb`,
      });
    }

    // Interactive monitoring
    let interactionCount = 0;
    ['click', 'touchstart', 'keydown'].forEach(eventType => {
      document.addEventListener(
        eventType,
        () => {
          interactionCount++;
          if (interactionCount === 1) {
            console.log('üëÜ First user interaction detected');
          }
        },
        { once: eventType === 'click' || eventType === 'touchstart' }
      );
    });

    // Bundle size analysis
    const scriptTags = document.querySelectorAll('script[src]');
    const styleTags = document.querySelectorAll('link[rel="stylesheet"]');

    console.log('üìã Bundle Analysis:', {
      scripts: scriptTags.length,
      stylesheets: styleTags.length,
      inlineScripts: document.querySelectorAll('script:not([src])').length,
    });
  }

  // Initialize performance monitoring
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPerformanceMonitoring);
  } else {
    initPerformanceMonitoring();
  }

  // Add global function to enable performance monitoring
  window.__enableWHPHPerfMonitoring = () => {
    localStorage.setItem('whph-perf-monitoring', 'true');
    console.log('‚úÖ WHPH Performance Monitoring enabled. Reload the page to see metrics.');
  };

  window.__disableWHPHPerfMonitoring = () => {
    localStorage.removeItem('whph-perf-monitoring');
    console.log('‚ùå WHPH Performance Monitoring disabled.');
  };
</script>
