---
import {
  supportedLanguages,
  languageNames,
  getLanguageFromURL,
  addLanguageToURL,
  removeLanguageFromURL,
  type SupportedLanguage,
} from '../utils/i18n';
import TranslationIcon from './icons/TranslationIcon.astro';
import ChevronDownIcon from './icons/ChevronDownIcon.astro';
import CheckmarkIcon from './icons/CheckmarkIcon.astro';

interface Props {
  currentLang: SupportedLanguage;
  currentPath: string;
  isMobile?: boolean;
}

const { currentLang, currentPath, isMobile = false } = Astro.props;

// Generate language switching URLs
const cleanPath = removeLanguageFromURL(currentPath);
const languageLinks = supportedLanguages.map(lang => ({
  code: lang,
  name: languageNames[lang],
  url: addLanguageToURL(cleanPath, lang),
  isActive: lang === currentLang,
}));
---

<div class={`language-switcher ${isMobile ? 'mobile' : 'desktop'}`} data-astro-cid-lang>
  {
    !isMobile && (
      <div class="relative inline-block text-left" data-astro-cid-lang>
        <button
          id="language-button"
          class="inline-flex w-full items-center justify-center rounded-whph border border-gray-600 bg-gray-800 px-3 py-2 text-sm font-medium text-gray-300 shadow-sm transition-colors hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2"
          aria-haspopup="true"
          aria-expanded="false"
          data-astro-cid-lang
        >
          <TranslationIcon class="mr-2" />
          <span data-astro-cid-lang>{languageNames[currentLang]}</span>
          <ChevronDownIcon class="ml-2 transition-transform duration-200" />
        </button>

        <div
          id="language-dropdown"
          class="invisible absolute right-0 z-10 mt-2 w-40 origin-top-right scale-95 transform rounded-whph border border-gray-700 bg-gray-800 opacity-0 shadow-lg ring-1 ring-black ring-opacity-5 transition-all duration-200 focus:outline-none"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="language-button"
          data-astro-cid-lang
        >
          <div class="py-1" role="none" data-astro-cid-lang>
            {languageLinks.map(lang => (
              <a
                href={lang.url}
                class={`block px-4 py-2 text-sm transition-colors ${
                  lang.isActive ? 'bg-primary/10 text-primary' : 'text-gray-300 hover:bg-gray-700'
                }`}
                role="menuitem"
                data-astro-cid-lang
              >
                <span class="flex items-center" data-astro-cid-lang>
                  {lang.isActive && <CheckmarkIcon class="mr-2 h-3 w-3 text-primary" />}
                  {lang.name}
                </span>
              </a>
            ))}
          </div>
        </div>
      </div>
    )
  }

  {
    isMobile && (
      <div class="relative" data-astro-cid-lang>
        <button
          id="language-button-mobile"
          class="flex w-full items-center justify-between rounded-lg p-3 text-gray-300 transition-colors hover:bg-gray-800"
          aria-haspopup="true"
          aria-expanded="false"
          data-astro-cid-lang
        >
          <div class="flex items-center space-x-3">
            <TranslationIcon class="h-4 w-4" />
            <span>{languageNames[currentLang]}</span>
          </div>
          <ChevronDownIcon class="h-4 w-4 transition-transform duration-200" />
        </button>

        <div
          id="language-dropdown-mobile"
          class="invisible mt-2 w-full scale-95 transform overflow-hidden rounded-lg border border-gray-700 bg-gray-800 opacity-0 shadow-lg transition-all duration-200"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="language-button-mobile"
          data-astro-cid-lang
        >
          <div class="py-1" role="none" data-astro-cid-lang>
            {languageLinks.map(lang => (
              <a
                href={lang.url}
                class={`block px-4 py-2 text-sm transition-colors ${
                  lang.isActive
                    ? 'bg-primary/10 font-medium text-primary'
                    : 'text-gray-300 hover:bg-gray-700'
                }`}
                role="menuitem"
                data-astro-cid-lang
              >
                <span class="flex items-center" data-astro-cid-lang>
                  {lang.isActive && <CheckmarkIcon class="mr-2 h-3 w-3 text-primary" />}
                  {lang.name}
                </span>
              </a>
            ))}
          </div>
        </div>
      </div>
    )
  }
</div>

<script>
  function initLanguageSwitcher() {
    // Desktop dropdown
    const button = document.getElementById('language-button');
    const dropdown = document.getElementById('language-dropdown');

    // Mobile dropdown
    const mobileButton = document.getElementById('language-button-mobile');
    const mobileDropdown = document.getElementById('language-dropdown-mobile');

    function toggleDropdown(btn: HTMLElement, dd: HTMLElement) {
      const isOpen = dd.classList.contains('opacity-100');

      if (isOpen) {
        dd.classList.remove('opacity-100', 'scale-100', 'visible');
        dd.classList.add('opacity-0', 'scale-95', 'invisible');
        btn.setAttribute('aria-expanded', 'false');

        // Rotate arrow back
        const arrow = btn.querySelector('svg:last-child') as HTMLElement;
        if (arrow) arrow.style.transform = 'rotate(0deg)';
      } else {
        dd.classList.remove('opacity-0', 'scale-95', 'invisible');
        dd.classList.add('opacity-100', 'scale-100', 'visible');
        btn.setAttribute('aria-expanded', 'true');

        // Rotate arrow down
        const arrow = btn.querySelector('svg:last-child') as HTMLElement;
        if (arrow) arrow.style.transform = 'rotate(180deg)';
      }
    }

    function closeDropdown(btn: HTMLElement, dd: HTMLElement) {
      dd.classList.remove('opacity-100', 'scale-100', 'visible');
      dd.classList.add('opacity-0', 'scale-95', 'invisible');
      btn.setAttribute('aria-expanded', 'false');

      const arrow = btn.querySelector('svg:last-child') as HTMLElement;
      if (arrow) arrow.style.transform = 'rotate(0deg)';
    }

    function setupDropdown(btn: HTMLElement, dd: HTMLElement) {
      // Toggle on button click
      btn.addEventListener('click', e => {
        e.stopPropagation();
        toggleDropdown(btn, dd);
      });

      // Close on outside click
      document.addEventListener('click', e => {
        const target = e.target as Node;
        if (target && !btn.contains(target) && !dd.contains(target)) {
          closeDropdown(btn, dd);
        }
      });

      // Close on escape key
      document.addEventListener('keydown', e => {
        if (e.key === 'Escape') {
          closeDropdown(btn, dd);
        }
      });

      // Handle keyboard navigation
      dd.addEventListener('keydown', e => {
        const items = dd.querySelectorAll('a[role="menuitem"]');
        const currentIndex = Array.from(items).findIndex(item => item === document.activeElement);

        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault();
            const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;
            (items[nextIndex] as HTMLElement).focus();
            break;
          case 'ArrowUp':
            e.preventDefault();
            const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;
            (items[prevIndex] as HTMLElement).focus();
            break;
          case 'Enter':
          case ' ':
            e.preventDefault();
            (document.activeElement as HTMLElement).click();
            break;
        }
      });
    }

    // Setup desktop dropdown
    if (button && dropdown) {
      setupDropdown(button, dropdown);
    }

    // Setup mobile dropdown
    if (mobileButton && mobileDropdown) {
      setupDropdown(mobileButton, mobileDropdown);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
  } else {
    initLanguageSwitcher();
  }
</script>

<style>
  /* Ensure proper z-index for dropdown */
  .language-switcher {
    position: relative;
  }

  /* Smooth transitions */
  #language-dropdown,
  #language-dropdown-mobile {
    transition:
      opacity 200ms ease-out,
      transform 200ms ease-out,
      visibility 200ms ease-out;
  }

  /* Mobile styles */
  .language-switcher.mobile {
    width: 100%;
  }

  .language-switcher.mobile a {
    display: block;
    width: 100%;
  }
</style>
